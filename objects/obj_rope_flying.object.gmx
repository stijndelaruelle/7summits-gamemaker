<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
m_DirectionX = 0;
m_DirectionY = 0;

m_Speed = 25;
m_HorizSpeed = 0;
m_VertSpeed = 0;

m_IsInitialized = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize speed (based on external direction)
if (!m_IsInitialized)
{
    m_HorizSpeed = m_Speed * m_DirectionX;
    m_VertSpeed =  m_Speed * m_DirectionY;
    m_IsInitialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle collision &amp; movement
m_VertSpeed += global.Gravity * 0.4; //lower gravity just feels better

var offsetX = m_HorizSpeed * global.GameDeltaTime;
var offsetY = m_VertSpeed * global.GameDeltaTime;

//Collision
if (place_meeting(x + offsetX, y + offsetY, par_solid) ||
    place_meeting(x + offsetX, y + offsetY, par_solid_projectile))
{
    //Check how long our rope can be (50, 100, 150, 200, 250 or 300)
    var length = 0;
    var i;
    for (i = 1; i &lt; 6; ++i)
    {
        if (!place_meeting(x, y + (50 * i), par_solid))
        {
            length = 50 * i;
        }  
        //exit the for loop gracefully
        else { i = 5; }
    }
    
    //Spawn a rope, and destroy ourselves
    if (length &gt; 0)
    {
        //The rope we can climb
        var spawnY = y;
        if (m_VertSpeed &lt; 0) spawnY -= 16;
        var rope = instance_create(x, spawnY, obj_rope);
        rope.image_yscale = length;
        
        //The rope pickup
        var rope_pickup = instance_create(x, spawnY - 16, obj_rope_pickup);
        rope_pickup.m_RopeInstance = rope;
    }
    
    instance_destroy();
}

//Handle image rotation
var angle = point_direction(x, y, x + offsetX, y + offsetY);
image_angle = angle;

//Handle Movement
x += offsetX;
y += offsetY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,3</point>
    <point>11,11</point>
  </PhysicsShapePoints>
</object>
