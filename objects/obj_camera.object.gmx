<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
m_PanTime = 0;
m_WaitTime = 0; //The amount of time we stay at the target position, -1 = stay here forever
m_Timer = 0;

m_FollowPlayer = true;
m_FollowOffsetX = 0;
m_FollowOffsetY = 0;
m_StartX = 0;
m_StartY = 0;
m_TargetX = 0;
m_TargetY = 0;

//Internal
m_IsInitialized = false;
m_IsPanning = false;
m_IsReturning = false;
m_IsWaiting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
if (m_IsPanning &amp;&amp; !m_IsInitialized)
{
    m_Timer = m_PanTime;
    
    m_StartX = view_xview[0];
    m_StartY = view_yview[0];

    m_IsInitialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow player
if (!m_IsPanning &amp;&amp; m_FollowPlayer)
{
    view_xview[0] = obj_player.x - (view_wview[0] * 0.5) + m_FollowOffsetX;
    view_yview[0] = obj_player.y - (view_hview[0] * 0.5) + m_FollowOffsetY;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panning
if (m_IsPanning)
{

m_Timer -= global.DeltaTime;

if (m_Timer &lt;= 0.0)
{
    //Go into waiting fase
    if (!m_IsReturning &amp;&amp; !m_IsWaiting)
    {
        //A waiting of -1 means we wait forever
        if (m_WaitTime == -1)
        {
            m_Timer = 0.0;
            m_IsPanning = false;
            m_IsReturning = false;
            m_IsWaiting = false;
            m_IsInitialized = false;
        }
        else
        {
            m_Timer = m_WaitTime;
            m_IsWaiting = true;
            
            //Swap target
            var tempX = m_StartX;
            var tempY = m_StartY;
            
            m_StartX = m_TargetX;
            m_StartY = m_TargetY;
            m_TargetX = tempX;
            m_TargetY = tempY;
        }
    }
    
    //Get out of waiting fase
    else if (!m_IsReturning &amp;&amp; m_IsWaiting)
    {
        m_Timer = m_PanTime;
        m_IsReturning = true;
        m_IsWaiting = false;
    }
    
    //Stop panning, we're done
    else if (m_IsReturning)
    {
        m_Timer = 0.0;
        m_IsPanning = false;
        m_IsReturning = false;
        m_IsWaiting = false;
        m_IsInitialized = false;
    }
}

    if (!m_IsWaiting)
    {
        view_xview[0] = lerp(m_StartX, m_TargetX, (m_PanTime - m_Timer) / m_PanTime);
        view_yview[0] = lerp(m_StartY, m_TargetY, (m_PanTime - m_Timer) / m_PanTime);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limit boundries
var newX = view_xview[0];
if (newX &lt; 0) newX = 0;
if (newX &gt; room_width) newX = room_width;

var newY = view_yview[0];
if (newY &lt; 0) newY = 0;
if (newY &gt; room_height) newY = room_height;

view_xview[0] = newX;
view_yview[0] = newY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
