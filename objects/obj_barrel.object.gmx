<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_barrel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_barrel</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove the sprite by default
sprite_index = -1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
m_Speed = 5;
m_HorizSpeed = m_Speed;
m_VertSpeed = 0;
m_RotationSpeed = 5;

m_WasOnGround = false; //Used to roll of slopes
m_HasBounced = false;

m_DrawAngle = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle collision &amp; movement
//Check for ground

//Set gravity
if (place_meeting(x, y+1, par_solid) || place_meeting(x, y+1, par_solid_projectile))
{ 
    m_VertSpeed = 0;
}
else
{
    m_VertSpeed += global.Gravity * 0.6; //lower gravity just feels better
}

//Horizontal collision
if (m_VertSpeed == 0)
{
    if (place_meeting(x + (m_HorizSpeed * global.GameDeltaTime), y, par_solid) ||
        place_meeting(x + (m_HorizSpeed * global.GameDeltaTime), y, par_solid_projectile))
    {
        //Just change directions
        m_HorizSpeed *= -1;
    }
}

x += m_HorizSpeed * global.GameDeltaTime;

//Vertical collision
var maxSlope = 10;
var isOnGround = false;

//Check if we can run off a slope
if (m_WasOnGround &amp;&amp; m_VertSpeed == 0)
{
    if (place_meeting(x, y + maxSlope, par_solid) ||
        place_meeting(x, y + maxSlope, par_solid_projectile))
    {
        var yOffset = 0;
        while (!place_meeting(x, y + 1, par_solid) &amp;&amp;
                !place_meeting(x, y + 1, par_solid_projectile) &amp;&amp;
                yOffset &lt;= maxSlope)
        {
            y += 1;
            ++yOffset;
        }
        m_VertSpeed = 0;
        isOnGround = true;
    }
}

if ((place_meeting(x, y + (m_VertSpeed * global.GameDeltaTime), par_solid) ||
     place_meeting(x, y + (m_VertSpeed * global.GameDeltaTime), par_solid_projectile)) &amp;&amp;
     !isOnGround)
{
    while (!place_meeting(x, y + sign(m_VertSpeed), par_solid) &amp;&amp;
           !place_meeting(x, y + sign(m_VertSpeed), par_solid_projectile))
    {
        y += sign(m_VertSpeed);
    }
    m_VertSpeed = 0;
    isOnGround = true;
    
    //We touched the ground, bounce up a bit (to fake physics)
    if (!m_WasOnGround)
    {
        if (!m_HasBounced)
        {
            m_VertSpeed = -5;
            m_HasBounced = true;
        }
        else
        {
            m_HasBounced = false;
        }
    }
}

m_WasOnGround = isOnGround;

//Move vertically
y += m_VertSpeed * global.GameDeltaTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw our sprite

//Rotate
m_DrawAngle += -sign(m_HorizSpeed) * m_RotationSpeed;
draw_sprite_ext(spr_barrel,0, x, y,image_xscale, image_yscale, m_DrawAngle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
