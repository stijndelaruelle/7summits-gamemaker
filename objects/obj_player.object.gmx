<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dude_scaleref</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
m_Speed = 10;
m_JumpSpeed = 2;
m_MaxJumpSpeed = 15;
m_HorizSpeed = 0;
m_VertSpeed = 0;
m_HorizCarrySpeed = 0;
m_VertCarrySpeed = 0;

m_MaxAirJumps = 0; //No double jumping (at least not at the beginning)
m_AirJumps = m_MaxAirJumps;

m_IsOnLadder = false;
m_WasOnGround = false; //Were we on the ground last frame? Used for decending slopes

//Stats
m_MaxHealth = 6;
m_Health = m_MaxHealth;
m_Score = 0;
m_TravelledHeight = 0;
m_CurrentHeight = 0;

//Shooting
m_ReloadTime = 0;
m_MaxReloadTime = 1;

//Keys
m_KeyLeft = 0;
m_KeyRight = 0;
m_KeyUp = 0;
m_KeyDown = 0;

m_IsJumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle death
if (m_Health &lt;= 0)
{
    m_Health = m_MaxHealth;
    
    x = obj_levelsettings.m_SpawnX;
    y = obj_levelsettings.m_SpawnY;
    
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle input

m_KeyLeft = keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("Q"));
m_KeyRight = keyboard_check(vk_right) || keyboard_check(ord("D"));
m_KeyUp = keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("Z"));
m_KeyDown = keyboard_check(vk_down) || keyboard_check(ord("S"));

var jumpKey = keyboard_check_pressed(vk_space);
var jumpKeyReleased = keyboard_check_released(vk_space);

var shootKey = (mouse_button == mb_left);
  
//Check for ground
if (place_meeting(x, y+1, par_solid) || m_IsOnLadder)
{
    m_VertSpeed = 0;
    m_AirJumps = m_MaxAirJumps;
    
    if (jumpKey)
    {
        m_VertSpeed += -m_JumpSpeed; //Just so we leave the ground
        m_IsOnLadder = false;
        m_IsJumping = true;
    }
}

//We're in the air
else
{
    m_VertSpeed += global.Gravity;
    
    //Jump height
    if (jumpKeyReleased || m_VertSpeed &gt; 0) { m_IsJumping = false; }
    
    if (m_IsJumping)
    {
        var newVertSpeed = m_VertSpeed -(m_MaxJumpSpeed - -m_VertSpeed) * 0.75;
        if ((m_VertSpeed - global.Gravity) == newVertSpeed)
        {
            
            m_IsJumping = false;
        }
        else
        {
            m_VertSpeed = newVertSpeed;
        }
    }

    //Airjumps
    if (m_AirJumps &gt; 0)
    {
        if (jumpKey)
        {
            m_VertSpeed = -m_JumpSpeed;
            m_IsJumping = true;
            --m_AirJumps;
        }
    }
}

//Move left
if (m_KeyLeft)
{
    m_HorizSpeed = -m_Speed;
}

//Move right
if (m_KeyRight)
{
    m_HorizSpeed = m_Speed;
}

//Ladder
if (!m_IsOnLadder)
{
    if (m_KeyUp || m_KeyDown)
    {
        if (place_meeting(x, y, par_ladder))
        {
            m_IsOnLadder = true;
        }
    }
}

if (m_IsOnLadder)
{
    m_VertSpeed = 0;
    
    if (m_KeyUp) m_VertSpeed = -(m_Speed * 2) / 3;
    if (m_KeyDown) m_VertSpeed = -(m_Speed * 2) / 3;
    if (!place_meeting(x,y,par_ladder)) m_IsOnLadder = false;    
}

//Not moving
if ((m_KeyLeft &amp;&amp; m_KeyRight) || (!m_KeyLeft &amp;&amp; !m_KeyRight))
{
    m_HorizSpeed = 0;
}

var finalHorizSpeed = m_HorizSpeed + m_HorizCarrySpeed;
m_HorizCarrySpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle door interaction
if (m_KeyUp)
{
    if (place_meeting(x, y, obj_door))
    {
        room_goto(rm_demo2);
        m_TravelledHeight += m_CurrentHeight;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Thowing a rope
if (m_ReloadTime &gt; 0)
{
    m_ReloadTime -= global.DeltaTime;
}
else if (shootKey)
{
    var angle = point_direction(x, y, mouse_x, mouse_y);
    
    var bullet = instance_create(x, y, obj_bullet);
    bullet.m_DirectionX = cos(angle * (pi / 180));
    bullet.m_DirectionY = sin(angle * (pi / 180));
    bullet.image_angle = angle;
    
    //offet the bullet so he doesn't spawn in us.
    bullet.x += bullet.m_DirectionX * 32;
    bullet.y -= bullet.m_DirectionY * 32;
    
    m_ReloadTime = m_MaxReloadTime;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle collisions &amp; movement
var maxSlope = 10;

//Horizontal collision
if (place_meeting(x + (finalHorizSpeed * global.GameDeltaTime), y, par_solid))
{
    var yOffset = 0;
    
    //Check how steep the slope is
    while(place_meeting(x + (finalHorizSpeed * global.GameDeltaTime), y - yOffset, par_solid) &amp;&amp; yOffset &lt;= maxSlope)
    {
        ++yOffset;
    }
    
    //To steep we can't climp it
    if (yOffset &gt; maxSlope)
    {
        while (!place_meeting(x + sign(finalHorizSpeed), y, par_solid))
        {
            x += sign(finalHorizSpeed);
        }
        finalHorizSpeed = 0;
    }
    else
    {
        y -= yOffset;
    }
}

//Move horizontally
x += finalHorizSpeed * global.GameDeltaTime;

//Vertical collision
var isOnGround = false;

//Check if we can run off a slope
if (m_WasOnGround &amp;&amp; m_VertSpeed == 0)
{
    if (place_meeting(x, y + maxSlope, par_solid))
    {
        var yOffset = 0;
        while (!place_meeting(x, y + 1, par_solid) &amp;&amp; yOffset &lt;= maxSlope)
        {
            y += 1;
            ++yOffset;
        }
        m_VertSpeed = 0;
        isOnGround = true;
    }
}

if (place_meeting(x, y + (m_VertSpeed * global.GameDeltaTime), par_solid) &amp;&amp; !isOnGround)
{
    while (!place_meeting(x, y + sign(m_VertSpeed), par_solid))
    {
        y += sign(m_VertSpeed);
    }
    m_VertSpeed = 0;
    isOnGround = true;
}

m_WasOnGround = isOnGround;

//Move vertically
y += m_VertSpeed * global.GameDeltaTime;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle animations
if (m_VertSpeed != 0)
{
    if (!place_meeting(x, y+1, par_solid))
    {
        //sprite_index = spr_player_jump;
        image_speed = 0;   
        
        if (y &gt;= yprevious)
        {
            //image_index = 1;
        }
        else
        {
            //image_index = 0;
        }
    }
}
else
{
    if (m_HorizSpeed == 0)
    {
        //sprite_index = spr_player_idle;
        //image_speed = 0;   
    }
    else
    {
        //sprite_index = spr_player_walk;
        //image_speed = 0.3;
    }
}

//Flip the sprite acoording to our direction
if (m_HorizSpeed &lt; 0)
{
    image_xscale = 1;
}

if (m_HorizSpeed &gt; 0)
{
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Score &amp; height</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate height
m_CurrentHeight = room_height - abs(y) - 32;  //32 is just the base floor
m_CurrentHeight -= abs(bbox_bottom) - abs(y); //sprite_height * 0.5; //remove half of the sprite height
m_CurrentHeight /= 32;                        //32 pixels = 1 meter
m_CurrentHeight = floor(m_CurrentHeight);     //floor the value
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn
x = obj_levelsettings.m_SpawnX;
y = obj_levelsettings.m_SpawnY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health
var numHearts = ceil(m_MaxHealth / 2);

for (var i = 0; i &lt; numHearts; ++i)
{
    //Determine the frame
    var frame = 0;                              //Full heart
    if (m_Health == (i * 2) + 1) { frame = 1; } //Half heart
    else if (m_Health &lt;= (i * 2)){ frame = 2; } //Empty heart
    
    draw_sprite(spr_hud_hearts, frame, 16 + (i * 32), 16);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw score &amp; height
draw_set_color(c_red);
draw_text(16, 63, "Punten: " + string(m_Score));
draw_text(16, 80, "Hoogte: " + string(m_TravelledHeight + m_CurrentHeight) + " meter");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goto goal
x = obj_levelsettings.m_GoalX;
y = obj_levelsettings.m_GoalY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
