<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

m_Gravity = 1;
m_Speed = 14;
m_JumpSpeed = 20;
m_HorizSpeed = 0;
m_VertSpeed = 0;
m_HorizCarrySpeed = 0;
m_VertCarrySpeed = 0;

m_MaxAirJumps = 1;
m_AirJumps = m_MaxAirJumps;

//Keys
m_KeyDown = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle input

var leftKey = keyboard_check(vk_left);
var rightKey = keyboard_check(vk_right);
var jumpKey = keyboard_check_pressed(vk_up);
m_KeyDown = keyboard_check(vk_down);

var deltaTime = 30 * (delta_time / 1000000); //delta_time is in microseconds

//Check for ground
if (place_meeting(x, y+1, obj_solid))
{
    m_VertSpeed = 0;
    m_AirJumps = m_MaxAirJumps;
    
    //Jumping
    if (jumpKey)
    {
        m_VertSpeed = -m_JumpSpeed;
    }
}

//We're in the air
else
{
    if (m_VertSpeed &lt; 10)
    {
        m_VertSpeed += m_Gravity;
    }
    
    if (m_AirJumps &gt; 0)
    {
        if (jumpKey)
        {
            m_VertSpeed = -m_JumpSpeed;
            --m_AirJumps;
        }
    }
}

//Move left
if (leftKey)
{
    m_HorizSpeed = -m_Speed;
}

//Move right
if (rightKey)
{
    m_HorizSpeed = m_Speed;
}

//Walljump
//if (jumpKey)
//{
//    //Left walljump
//    if (place_meeting(x-1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; rightKey)
//    {
//        m_VertSpeed = -m_JumpSpeed;
//        m_HorizSpeed = -m_Speed;
//    }
//    
//    //Right walljump
//    if (place_meeting(x+1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; leftKey)
//    {
//        m_VertSpeed = -m_JumpSpeed;
//        m_HorizSpeed = m_Speed;
//    }
//}

//Not moving
if ((leftKey &amp;&amp; rightKey) || (!leftKey &amp;&amp; !rightKey))
{
    m_HorizSpeed = 0;
}

var finalHorizSpeed = m_HorizSpeed + m_HorizCarrySpeed;
m_HorizCarrySpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle collisions &amp; movement

//Horizontal collision
if (place_meeting(x + (finalHorizSpeed * deltaTime), y, obj_solid))
{
    var yOffset = 0;
    
    while(place_meeting(x + (finalHorizSpeed), y - yOffset, obj_solid) &amp;&amp; yOffset &lt;= 15)
    {
        ++yOffset;
    }
    
    if (yOffset &gt; 15)
    {
        while (!place_meeting(x + sign(finalHorizSpeed), y, obj_solid))
        {
            x += sign(finalHorizSpeed);
        }
        finalHorizSpeed = 0;
    }
    else
    {
        y -= yOffset;
    }
}

//Move horizontally
x += finalHorizSpeed * deltaTime;

//Vertical collision

if (place_meeting(x, y + (m_VertSpeed), obj_solid))
{
    while (!place_meeting(x, y + sign(m_VertSpeed), obj_solid))
    {
        y += sign(m_VertSpeed);
    }
    m_VertSpeed = 0;
}

//Move vertically
y += m_VertSpeed * deltaTime;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle animations
if (yprevious != y)
{
    sprite_index = spr_player_jump;
    image_speed = 0;   
    
    if (y &gt;= yprevious)
    {
        image_index = 1;
    }
    else
    {
        image_index = 0;
    }
}
else
{
    if (m_HorizSpeed != 0)
    {
        sprite_index = spr_player_walk;
        image_speed = 0.3;
    }
    else
    {
        sprite_index = spr_player_idle;
        image_speed = 0;
    }
}

//We're moving to the left
if (m_HorizSpeed &lt; 0)
{
    image_xscale = -1;
}

if (m_HorizSpeed &gt; 0)
{
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
